package com.project.ibm.controller;

import java.util.List;
import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;

import com.project.ibm.entities.Registro;
import com.project.ibm.entities.Users;
import com.project.ibm.repositories.RegistroRepository;
import com.project.ibm.repositories.UserRepository;

import ch.qos.logback.core.status.Status;

@Controller
@RequestMapping(value = "/register")
public class RegistroController {

	@Autowired
	private RegistroRepository registroRepository;
	
	@Autowired
	private UserRepository userRepository;
	
	@PostMapping(path = "/{id}")
	public ResponseEntity<Registro> create(@RequestBody Registro register, @PathVariable Long id){
		
		Registro registers = new Registro(null, register.getMoment().now());	
		
		Optional<Users> user = userRepository.findById(id);
		
		if(user.isEmpty()) {
			return new ResponseEntity<>(HttpStatus.BAD_REQUEST);
		}
		registers.setUsers(user.;
		 registroRepository.save(registers);
		return ResponseEntity.ok(registers);
	}
	
	@GetMapping
	public  ResponseEntity<List<Registro>> show(){
		List<Registro> register = registroRepository.findAll();
		
		return ResponseEntity.ok(register);
	}
	
}
